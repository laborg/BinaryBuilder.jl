function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    isdefined(BinaryBuilder, Symbol("##OutputCollector#11")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("##OutputCollector#11")),Bool,Bool,Base.TTY,Type{OutputCollector},Cmd})
    isdefined(BinaryBuilder, Symbol("##audit#158")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("##audit#158")),Base.TTY,Linux,Bool,Bool,Bool,Bool,typeof(audit),Prefix,String})
    isdefined(BinaryBuilder, Symbol("##check_cxxstring_abi#145")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("##check_cxxstring_abi#145")),Base.TTY,Bool,typeof(BinaryBuilder.check_cxxstring_abi),ObjectFile.ELF.ELFHandle{IOStream},Linux})
    isdefined(BinaryBuilder, Symbol("##resolve_jlls#38")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("##resolve_jlls#38")),Pkg.Types.Context,Base.TTY,typeof(BinaryBuilder.resolve_jlls),Array{Dependency,1}})
    isdefined(BinaryBuilder, Symbol("##run#286")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("##run#286")),Bool,Base.TTY,typeof(run),BinaryBuilder.UserNSRunner,Cmd,IOStream})
    isdefined(BinaryBuilder, Symbol("#101#115")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#101#115")),String})
    isdefined(BinaryBuilder, Symbol("#102#116")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#102#116")),String})
    isdefined(BinaryBuilder, Symbol("#102#116")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#102#116")),SubString{String}})
    isdefined(BinaryBuilder, Symbol("#159#166")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#159#166")),String})
    isdefined(BinaryBuilder, Symbol("#176#179")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#176#179")),String})
    isdefined(BinaryBuilder, Symbol("#176#179")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#176#179")),String})
    isdefined(BinaryBuilder, Symbol("#20#21")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#20#21"))})
    isdefined(BinaryBuilder, Symbol("#20#21")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#20#21"))})
    isdefined(BinaryBuilder, Symbol("#228#233")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#228#233")),String})
    isdefined(BinaryBuilder, Symbol("#229#234")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#229#234")),String})
    isdefined(BinaryBuilder, Symbol("#230#235")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#230#235")),String})
    isdefined(BinaryBuilder, Symbol("#288#289")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#288#289"))})
    isdefined(BinaryBuilder, Symbol("#7#9")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#7#9"))})
    isdefined(BinaryBuilder, Symbol("#8#10")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#8#10"))})
    isdefined(BinaryBuilder, Symbol("#GOOS#214")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#GOOS#214")),Linux})
    isdefined(BinaryBuilder, Symbol("#base_gcc_flags#197")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#base_gcc_flags#197")),Linux})
    isdefined(BinaryBuilder, Symbol("#cargo#221")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#cargo#221")),IOStream,Linux})
    isdefined(BinaryBuilder, Symbol("#cc#211")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#cc#211")),IOStream,Linux})
    isdefined(BinaryBuilder, Symbol("#check_set#154")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#check_set#154")),String,Array{String,1}})
    isdefined(BinaryBuilder, Symbol("#clang#208")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#clang#208")),IOStream,Linux})
    isdefined(BinaryBuilder, Symbol("#clang_compile_flags#202")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#clang_compile_flags#202")),Linux})
    isdefined(BinaryBuilder, Symbol("#clang_flags#201")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#clang_flags#201")),Linux})
    isdefined(BinaryBuilder, Symbol("#clang_link_flags#203")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#clang_link_flags#203")),Linux})
    isdefined(BinaryBuilder, Symbol("#clangxx#209")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#clangxx#209")),IOStream,Linux})
    isdefined(BinaryBuilder, Symbol("#cxx#212")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#cxx#212")),IOStream,Linux})
    isdefined(BinaryBuilder, Symbol("#cxxfilt#223")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#cxxfilt#223")),IOStream,Linux})
    isdefined(BinaryBuilder, Symbol("#fortran_flags#199")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#fortran_flags#199")),Linux})
    isdefined(BinaryBuilder, Symbol("#gcc_flags#198")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#gcc_flags#198")),Linux})
    isdefined(BinaryBuilder, Symbol("#gcc_link_flags#204")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#gcc_link_flags#204")),Linux})
    isdefined(BinaryBuilder, Symbol("#gfortran#207")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#gfortran#207")),IOStream,Linux})
    isdefined(BinaryBuilder, Symbol("#go#216")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#go#216")),IOStream,Linux})
    isdefined(BinaryBuilder, Symbol("#meson#222")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#meson#222")),IOStream,Linux})
    isdefined(BinaryBuilder, Symbol("#objc#210")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#objc#210")),IOStream,Linux})
    isdefined(BinaryBuilder, Symbol("#rust_flags#218")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#rust_flags#218")),Linux})
    isdefined(BinaryBuilder, Symbol("#rustc#219")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#rustc#219")),IOStream,Linux})
    isdefined(BinaryBuilder, Symbol("#rustup#220")) && precompile(Tuple{getfield(BinaryBuilder, Symbol("#rustup#220")),IOStream,Linux})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.autobuild)),NamedTuple{(:verbose, :debug, :meta_json_stream, :compilers),Tuple{Bool,Bool,IOStream,Array{Symbol,1}}},typeof(autobuild),String,String,VersionNumber,Array{DirectorySource,1},String,Array{Linux,1},Array{Product,1},Array{Dependency,1}})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.autobuild)),NamedTuple{(:verbose, :debug, :meta_json_stream, :compilers),Tuple{Bool,Bool,Nothing,Array{Symbol,1}}},typeof(autobuild),String,String,VersionNumber,Array{DirectorySource,1},String,Array{Linux,1},Array{Product,1},Array{Dependency,1}})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.build_tarballs)),NamedTuple{(:compilers,),Tuple{Array{Symbol,1}}},typeof(build_tarballs),Array{String,1},String,VersionNumber,Array{DirectorySource,1},String,Array{Linux,1},Array{Product,1},Array{Dependency,1}})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.check_cxxstring_abi)),NamedTuple{(:verbose,),Tuple{Bool}},typeof(BinaryBuilder.check_cxxstring_abi),ObjectFile.ELF.ELFHandle{IOStream},Linux})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.check_dynamic_linkage)),NamedTuple{(:platform, :silent, :verbose, :autofix),Tuple{Linux,Bool,Bool,Bool}},typeof(BinaryBuilder.check_dynamic_linkage),ObjectFile.ELF.ELFHandle{IOStream},Prefix,Array{String,1}})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.check_isa)),NamedTuple{(:verbose, :silent),Tuple{Bool,Bool}},typeof(BinaryBuilder.check_isa),ObjectFile.ELF.ELFHandle{IOStream},Linux,Prefix})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.check_libgfortran_version)),NamedTuple{(:verbose,),Tuple{Bool}},typeof(BinaryBuilder.check_libgfortran_version),ObjectFile.ELF.ELFHandle{IOStream},Linux})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.check_license)),NamedTuple{(:verbose, :silent),Tuple{Bool,Bool}},typeof(BinaryBuilder.check_license),Prefix,String})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.check_os_abi)),NamedTuple{(:verbose,),Tuple{Bool}},typeof(BinaryBuilder.check_os_abi),ObjectFile.ELF.ELFHandle{IOStream},Linux})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.choose_shards)),NamedTuple{(:compilers,),Tuple{Array{Symbol,1}}},typeof(BinaryBuilder.choose_shards),Linux})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.ensure_soname)),NamedTuple{(:verbose, :autofix),Tuple{Bool,Bool}},typeof(BinaryBuilder.ensure_soname),Prefix,String,Linux})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.generate_compiler_wrappers!)),NamedTuple{(:bin_path, :compilers),Tuple{String,Array{Symbol,1}}},typeof(BinaryBuilder.generate_compiler_wrappers!),Linux})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.generate_compiler_wrappers!)),NamedTuple{(:bin_path,),Tuple{String}},typeof(BinaryBuilder.generate_compiler_wrappers!),Linux})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.get_compilers_versions)),NamedTuple{(:compilers,),Tuple{Array{Symbol,1}}},typeof(BinaryBuilder.get_compilers_versions)})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.satisfied)),NamedTuple{(:verbose, :platform),Tuple{Bool,Linux}},typeof(satisfied),ExecutableProduct,Prefix})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.symlink_soname_lib)),NamedTuple{(:verbose, :autofix),Tuple{Bool,Bool}},typeof(BinaryBuilder.symlink_soname_lib),String})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.translate_symlinks)),NamedTuple{(:verbose,),Tuple{Bool}},typeof(BinaryBuilder.translate_symlinks),String})
    precompile(Tuple{Core.kwftype(typeof(BinaryBuilder.update_linkage)),NamedTuple{(:verbose,),Tuple{Bool}},typeof(BinaryBuilder.update_linkage),Prefix,Linux,String,SubString{String},String})
    precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:cwd, :platform),Tuple{String,Linux}},Type{BinaryBuilder.UserNSRunner},String})
    precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:cwd, :platform, :verbose),Tuple{String,Linux,Bool}},Type{BinaryBuilder.UserNSRunner},String})
    precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:cwd, :platform, :verbose, :workspaces, :compiler_wrapper_dir, :src_name, :shards, :compilers),Tuple{String,Linux,Bool,Array{Pair{String,String},1},String,String,Array{BinaryBuilder.CompilerShard,1},Array{Symbol,1}}},Type{BinaryBuilder.UserNSRunner},String})
    precompile(Tuple{Type{ExecutableProduct},String,Symbol})
    precompile(Tuple{Type{OutputCollector},Cmd,Base.Process,BinaryBuilder.LineStream,BinaryBuilder.LineStream,Base.GenericCondition{Base.AlwaysLockedST},Base.DevNull,Bool,Bool})
    precompile(Tuple{Type{OutputCollector},Cmd,Base.Process,BinaryBuilder.LineStream,BinaryBuilder.LineStream,Base.GenericCondition{Base.AlwaysLockedST},Base.TTY,Bool,Bool})
    precompile(Tuple{typeof(Base._compute_eltype),Type{Tuple{Pair{String,String},Pair{String,String},Pair{String,Array{DirectorySource,1}},Pair{String,String},Pair{String,Array{String,1}},Pair{String,Array{Product,1}},Pair{String,Array{Dependency,1}},Pair{String,Bool}}}})
    precompile(Tuple{typeof(Base.allocatedinline),Type{BinaryBuilder.CompilerShard}})
    precompile(Tuple{typeof(Base.grow_to!),Dict{String,Any},Tuple{Pair{String,String},Pair{String,String},Pair{String,Array{DirectorySource,1}},Pair{String,String},Pair{String,Array{String,1}},Pair{String,Array{Product,1}},Pair{String,Array{Dependency,1}},Pair{String,Bool}},Int64})
    precompile(Tuple{typeof(Base.grow_to!),Dict{String,String},Tuple{Pair{String,String},Pair{String,String},Pair{String,Array{DirectorySource,1}},Pair{String,String},Pair{String,Array{String,1}},Pair{String,Array{Product,1}},Pair{String,Array{Dependency,1}},Pair{String,Bool}},Int64})
    precompile(Tuple{typeof(Base.merge_types),NTuple{8,Symbol},Type{NamedTuple{(:cwd, :platform, :verbose, :workspaces, :compiler_wrapper_dir, :src_name, :shards),Tuple{String,Linux,Bool,Array{Pair{String,String},1},String,String,Array{BinaryBuilder.CompilerShard,1}}}},Type{NamedTuple{(:compilers,),Tuple{Array{Symbol,1}}}}})
    precompile(Tuple{typeof(BinaryBuilder.should_ignore_lib),SubString{String},ObjectFile.ELF.ELFHandle{IOStream}})
    precompile(Tuple{typeof(BinaryBuilder.with_logfile),Function,Prefix,String})
    precompile(Tuple{typeof(JSON.Writer.show_element),JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8,1}}},JSON.Serializations.StandardSerialization,ExecutableProduct})
    precompile(Tuple{typeof(JSON.Writer.show_pair),JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8,1}}},JSON.Serializations.StandardSerialization,String,Array{Dependency,1}})
    precompile(Tuple{typeof(JSON.Writer.show_pair),JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8,1}}},JSON.Serializations.StandardSerialization,String,Array{DirectorySource,1}})
    precompile(Tuple{typeof(JSON.Writer.show_pair),JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8,1}}},JSON.Serializations.StandardSerialization,String,Array{Product,1}})
    precompile(Tuple{typeof(getindex),Type{Dependency}})
    precompile(Tuple{typeof(getindex),Type{DirectorySource}})
    precompile(Tuple{typeof(getindex),Type{Product},ExecutableProduct,ExecutableProduct,ExecutableProduct,ExecutableProduct,Vararg{ExecutableProduct,N} where N})
    precompile(Tuple{typeof(isequal),ExecutableProduct,ExecutableProduct})
    precompile(Tuple{typeof(merge),NamedTuple{(:cwd, :platform, :verbose, :workspaces, :compiler_wrapper_dir, :src_name, :shards),Tuple{String,Linux,Bool,Array{Pair{String,String},1},String,String,Array{BinaryBuilder.CompilerShard,1}}},NamedTuple{(:compilers,),Tuple{Array{Symbol,1}}}})
    precompile(Tuple{typeof(repr),ExecutableProduct})
    precompile(Tuple{typeof(repr),LibraryProduct})
    precompile(Tuple{typeof(setindex!),Dict{Any,Any},Dict{String,String},ExecutableProduct})
    precompile(Tuple{typeof(setindex!),Dict{String,Any},Array{Dependency,1},String})
    precompile(Tuple{typeof(setindex!),Dict{String,Any},Array{DirectorySource,1},String})
    precompile(Tuple{typeof(setindex!),Dict{String,Any},Array{Product,1},String})
end
